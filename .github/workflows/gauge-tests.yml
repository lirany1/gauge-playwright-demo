name: Gauge Playwright Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    name: Run Gauge Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13-dev'  # Using dev version since 3.13 is not released yet
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Create reports directory
      run: mkdir -p reports/html-report

    - name: Install Gauge
      run: |
        sudo npm install -g @getgauge/cli
        gauge install python
        gauge install html-report
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m venv .venv
        source .venv/bin/activate
        pip install --no-cache-dir -r requirements.txt
        pip install playwright pytest-playwright
    
    - name: Install Playwright browsers
      run: |
        source .venv/bin/activate
        python -m playwright install --with-deps chromium
    
    - name: Run Gauge tests
      id: run_tests
      continue-on-error: true
      run: |
        source .venv/bin/activate
        # Ensure directories exist
        mkdir -p reports/html-report
        
        # Set environment variables
        export PATH="$PATH:$HOME/.gauge/bin"
        export GAUGE_HOME="$HOME/.gauge"
        
        # Debug information
        echo "Python version:"
        python --version
        echo "Pip packages:"
        pip list
        echo "Playwright version:"
        python -m playwright --version
        
        # Run tests
        chmod +x start.sh
        ./start.sh run specs/ || echo "Tests failed but continuing..."
        
    - name: Verify report generation
      run: |
        echo "Checking reports directory..."
        if [ ! -d "reports/html-report" ] || [ -z "$(ls -A reports/html-report/)" ]; then
          echo "Creating minimal report..."
          mkdir -p reports/html-report
          cat > reports/html-report/index.html << EOF
          <!DOCTYPE html>
          <html>
            <head><title>Gauge Test Report</title></head>
            <body>
              <h1>Gauge Test Execution Report</h1>
              <p>Test execution completed at $(date)</p>
              <p>Note: Tests failed to generate a complete report.</p>
            </body>
          </html>
          EOF
        fi
        echo "Report directory contents:"
        ls -la reports/html-report/
    
    - name: Create default report if none exists
      if: always()
      run: |
        if [ ! -d "reports/html-report" ]; then
          mkdir -p reports/html-report
          echo "<html><body><h1>No test report available</h1><p>Tests failed to generate a report.</p></body></html>" > reports/html-report/index.html
        fi
        
    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gauge-test-report
        path: reports/html-report/
        if-no-files-found: error
    
    - name: Deploy report to GitHub Pages
      if: always() && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./reports/html-report
        destination_dir: reports
        enable_jekyll: false
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy Test Report'
